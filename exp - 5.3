1️⃣ Backend Dockerfile (Node.js/Express)

Create Dockerfile in your backend project:



# Use official Node.js image
FROM node:20

# Set working directory
WORKDIR /app

# Copy package.json and install dependencies
COPY package*.json ./
RUN npm install

# Copy source code
COPY . .

# Expose backend port
EXPOSE 3000




2️⃣ Push Docker Image to Amazon ECR

# Authenticate to ECR
aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <aws_account_id>.dkr.ecr.<region>.amazonaws.com

# Create repository if not exists
aws ecr create-repository --repository-name fullstack-backend

# Build and tag Docker image
docker build -t fullstack-backend .

docker tag fullstack-backend:latest <aws_account_id>.dkr.ecr.<region>.amazonaws.com/fullstack-backend:latest

# Push image
docker push <aws_account_id>.dkr.ecr.<region>.amazonaws.com/fullstack-backend:latest




3️⃣ ECS Fargate + ALB Setup (Terraform Example)

provider "aws" {
  region = "us-east-1"
}

# ECS Cluster
resource "aws_ecs_cluster" "fullstack_cluster" {
  name = "fullstack-cluster"
}

# ALB
resource "aws_lb" "app_alb" {
  name               = "fullstack-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = ["subnet-xxxx", "subnet-yyyy"]
}

# Target Group for backend
resource "aws_lb_target_group" "backend_tg" {
  name     = "backend-tg"
  port     = 3000
  protocol = "HTTP"
  vpc_id   = "vpc-xxxx"
  health_check {
    path                = "/health"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
    matcher             = "200-299"
  }
}

# Listener for ALB
resource "aws_lb_listener" "alb_listener" {
  load_balancer_arn = aws_lb.app_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.backend_tg.arn
  }
}

# ECS Task Definition
resource "aws_ecs_task_definition" "backend_task" {
  family                   = "backend-task"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"

  container_definitions = jsonencode([
    {
      name      = "backend"
      image     = "<aws_account_id>.dkr.ecr.<region>.amazonaws.com/fullstack-backend:latest"
      essential = true
      portMappings = [
        {
          containerPort = 3000
          hostPort      = 3000
        }
      ]
    }
  ])
}

# ECS Service
resource "aws_ecs_service" "backend_service" {
  name            = "backend-service"
  cluster         = aws_ecs_cluster.fullstack_cluster.id
  task_definition = aws_ecs_task_definition.backend_task.arn
  desired_count   = 2
  launch_type     = "FARGATE"

  network_configuration {
    subnets         = ["subnet-xxxx", "subnet-yyyy"]
    security_groups = [aws_security_group.ecs_sg.id]
    assign_public_ip = true
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.backend_tg.arn
    container_name   = "backend"
    container_port   = 3000
  }

  depends_on = [aws_lb_listener.alb_listener]
}



4️⃣ Frontend Deployment (React)

# Build React app
npm run build

# Sync to S3 bucket
aws s3 sync build/ s3://my-frontend-bucket --delete

# Enable CloudFront distribution to serve files over HTTPS


# Start server
CMD ["node", "server.js"]
